using System;
using System.Collections.Generic;
using UnityEngine;

namespace SpriteMan3D
{
    /// <summary>
    /// Class defining a character's unique sprite animation state.
    /// </summary>
    [Serializable]
    public class CharacterStateMapping : ICloneable
    {
        private int? stateNameHash;
        private string oldStateName;

        /// <summary>
        /// The state's name.
        /// </summary>
        public string stateName;
        /// <summary>
        /// The total number of frames in this state.
        /// </summary>
        public int frameCount;
        /// <summary>
        /// Sprite mapping for all valid rotation directions.
        /// </summary>
        public DirectionSpriteMapping[] directions;

        /// <summary>
        /// Gets the hash of the state name as generated by Animator.StringToHash().
        /// </summary>
        public int StateNameHash
        {
            get
            {
                if (!string.IsNullOrEmpty(stateName) && (stateNameHash == null || !stateName.Equals(oldStateName)))
                {
                    stateNameHash = Animator.StringToHash(stateName);
                    oldStateName = stateName;
                }

                return stateNameHash.Value;
            }
        }

        public CharacterStateMapping() { }

        protected CharacterStateMapping(CharacterStateMapping state)
        {
            stateName = state.stateName;
            frameCount = state.frameCount;

            var dirs = new List<DirectionSpriteMapping>();
            foreach(var dir in state.directions)
            {
                dirs.Add((DirectionSpriteMapping)dir.Clone());
            }

            directions = dirs.ToArray();
        }

        public object Clone()
        {
            return new CharacterStateMapping(this);
        }
    }
}
